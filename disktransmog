#!/usr/bin/env python3.4

'''

	Title: 

	Author: Dave "pugilist" Reindel

	Date:	Sep. 2015

	License: MIT License

	Description:
		Use this to translate different disk identifiers.  Input can be with or without
		paths.

'''

import os
import re
import sys
import stat
import argparse

base_path='/dev/disk'

def populate_devices():
	# build the list of /dev/disk directories
	dev_disk = { item:list() for item in os.listdir(base_path) }

	# populate the dict with directory listings so we can search through it later
	for directory in dev_disk:
		dev_disk[directory] = os.listdir(os.path.join(base_path,directory))

	return dev_disk

def get_dev(file_list,pattern):

	try:
		# if we received a dev device as input, return this directly by testing if it is a block device.
		if stat.S_ISBLK(os.stat(os.path.join('/dev/',pattern)).st_mode):
			return pattern
	except:
		# if the file does not exist, don't worry, just pass
		pass

	#strip off directory path if it exists
	pattern_fh = os.path.split(pattern)[1]

	# search through /dev/disk/* for the item we're looking for, then connect it to its block device.
	for directory in file_list.keys():
		for fh in file_list[directory]:
			match = re.match(pattern_fh,fh)
			if match != None:
				return os.path.realpath(os.path.join(base_path,directory,match.group(0)))

	# return None type if nothing is found
	return None

def match_item(args,file_list,method):
	
	dev = get_dev(file_list,args.input_string)
	
	# Since some system sare different and contain different folders in /dev/disk, if we throw a KeyError this means simply that the folder we're looking for does not exist on the system.  Return None and continue on.
	try:
		for item in file_list[method]:
			if os.path.join('/dev/',dev) == os.path.realpath(os.path.join(base_path,method,item)):
				return item
	except KeyError:
		return None

if __name__ == '__main__':
	
	parser = argparse.ArgumentParser(description="Transmogrify your disk labels")
	parser.add_argument("input_string",metavar="string",help="input the disk label that you'd like to convert")
	parser.add_argument("-f","--full-path",action="store_true",default=False,help="show full path in output")
	required_options = parser.add_mutually_exclusive_group(required=True)
	required_options.add_argument("-d","--to-dev",action="store_true",help="find the associated device")
	required_options.add_argument("-i","--to-id",action="store_true",help="find the associated id")
	required_options.add_argument("-l","--to-partlabel",action="store_true",help="find the associated partition label")
	required_options.add_argument("-p","--to-path",action="store_true",help="find the associated path")
	required_options.add_argument("-u","--to-uuid",action="store_true",help="find the associated disk uuid")
	required_options.add_argument("-U","--to-partuuid",action="store_true",help="find the associated partition uuid")

	args = parser.parse_args()

	file_list = populate_devices()

	if args.to_dev:
		result = get_dev(file_list,args.input_string)
		if result != None:
			if args.full_path:
				print(result)
			else:
				print(os.path.split(result)[1])
		else:
			sys.exit(1)
	else:

		if args.to_uuid:
			method = 'by-uuid'
		elif args.to_path:
			method = 'by-path'
		elif args.to_id:
			method = 'by-id'
		elif args.to_partlabel:
			method = 'by-partlabel'
		elif args.to_partuuid:
			method = 'by-partuuid'

		result = match_item(args,file_list,method)

		if result != None:
			if args.full_path:
				print(os.path.join(base_path,method,result))
			else:
				print(result)
		else:
			sys.exit(1)

		sys.exit(0)